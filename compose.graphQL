### Local Relationships 

query LocalRelns {
  experience_products {
    name
    categories {
      name
    }
    manufacturers {
      name
    }
    cartItems {
      carts {
        updatedAt
      }
      productId
    }
  }
}

### Nested queries - Joins
### GraphQL query using the above schema such that there are N+1 queries in fetching data from different subgraphs

query CrossRelns1 {
  users_users { # Fetching users might be the initial query
    id
    name
    orders { # For each user, fetch orders (N queries for N users)
      id
      products { # For each order, fetch products (1+N queries if each user has 1 order)
        id
        name
      }
    }
  }
}

query CrossRelns2 {
  experience_products {
    reviews {
      id
      users {
        email
        reviews {
          id
        }
      }
    }
  }
}

## Chaining Resolver Example

query ChainingResolver {
  users_reviews(where: {id: {_eq: "dc9768a4-673c-11ed-b682-7224baf239e5"}}) {
    text
    rating
    id
    users {
      name
      id
    }
    products{
      price
      id
    }
  }
}

### Top N

# {
#   salesUsers(limit: 2) {
#     id   #From subgraph-1
#     name
#         #From subgraph-2
#     reviews(order_by: {created_at: Asc}, limit: 3) {
#       id
#       created_at
#       rating
#     }
#   }
# }

query TopN{
  experience_products(offset: 1, order_by: {manufacturers: {name: Asc}}) {
    name
    orders(order_by: {createdAt: Asc}, limit: 2) {
      createdAt
      users {
        name
        reviews(order_by: {rating: Desc}, limit: 1) {
          text
        }
      }
    }
  }
}

### Product Page (Top N)

# {
#   products(
#     where: {country_of_origin: {_eq: "US"}}
#     order_by: {price: Asc}
#     limit: 10
#   ) {
#     id
#     name
#     price
#     manufacturer {
#       name
#     }
#     topReviews: reviews(
#       where: {created_at: {_gt: "2023-10-15"}}
#       order_by: {rating: Desc}
#       limit: 3
#     ) {
#       rating
#       text
#       user {
#         name
#       }
#     }
#     worstReviews: reviews(
#       where: {created_at: {_gt: "2023-10-15"}}
#       order_by: {rating: Asc}
#       limit: 3
#     ) {
#       rating
#       text
#       user {
#         name
#       }
#     }
#   }
# }

### Peoduct Page Top N and local relationships in boolean expressions work

query ProductHomePage {
  experience_products(
    where: {countryOfOrigin: {_eq: "US"}, categories: {name: {_eq: "T-Shirts"}}}
    order_by: {price: Asc}
    limit: 10
  ) {
    id
    name
    price
    manufacturers {
      name
    }
    topReviews: reviews(
      where: {createdAt: {_gt: "2023-10-15"}}
      order_by: {rating: Desc}
      limit: 3
    ) {
      rating
      text
      users {
        name
      }
    }
    worstReviews: reviews(
      where: {createdAt: {_gt: "2023-10-15"}}
      order_by: {rating: Asc}
      limit: 3
    ) {
      rating
      text
      users {
        name
      }
    }
    categories {
      name
    }
  }
}

### Nested Relationship Traversal, Filtering, Offsetting and Sorting

query NestedRelnsFiltsort {
  experience_products {
    reviews {
      id
      users {
        email
        reviews(
          where: {isVisible: {_eq: "false"}}
          offset: 1
          order_by: {createdAt: Desc}
        ) {
          id
          isVisible
        }
      }
    }
  }
}

### Remote Relationship in Filter

query Relnsinfilter {
  experience_products(
    where: {manufacturerId: {_eq: "e99cbfe2-65b4-11ed-b13b-6a8b11ef7372"}}
    order_by: {manufacturerId: Asc}
  ) {
    orders(order_by: {deliveryDate: Desc}) {
      id
      users {
        notifications(order_by: {createdAt: Asc}) {
          message
          createdAt
        }
      }
    }
  }
}

### Parallel Execution 

query Parallelexecution {
  users_users {
    id
    orders { # remote relationship
      deliveryDate
    }
    carts { # remote relationship
      createdAt
    }
  }
  experience_products {
    name
  }
}


------
### AuthZ 

query AuthZUserOrders {
  sales_orders(order_by: {createdAt: Desc}) {
    id
    userId
    products {
      name
    }
  }
}

### Vector Search
query Vectorsimple {
  experience_productsVectorDistance(args: {queryVector: "[-0.26627868,0.024454566,-0.12411288,-0.06926076,0.114167295,-0.05908405,-0.11366025,-0.20373131,-0.07778197,-0.13792849,0.024760943,-0.06993264,-0.08388083,-0.062369984,0.048473757,0.024872025,-0.23152019,-0.05411574,0.004388886,-0.21127427,-0.15947516,0.105058424,0.033486396,-0.029446172,-0.2548478,-0.21878138,-0.0880393,0.33248106,0.093399994,-0.20333715,0.30673468,0.114914425,-0.105746426,0.18683583,-0.049713593,0.113479294,0.06528862,-0.0078796055,-0.12683801,-0.2029609,0.17053875,0.03340398,-0.061518937,0.059385054,0.13831548,-0.13800374,-0.0011183274,-0.21415886,0.09237874,-0.107848056]"}) {
    id
  }
}

query SearchProductsVector {
  experience_productsVectorDistance(args: { queryVector: "[-0.26627868,0.024454566,-0.12411288,-0.06926076,0.114167295,-0.05908405,-0.11366025,-0.20373131,-0.07778197,-0.13792849,0.024760943,-0.06993264,-0.08388083,-0.062369984,0.048473757,0.024872025,-0.23152019,-0.05411574,0.004388886,-0.21127427,-0.15947516,0.105058424,0.033486396,-0.029446172,-0.2548478,-0.21878138,-0.0880393,0.33248106,0.093399994,-0.20333715,0.30673468,0.114914425,-0.105746426,0.18683583,-0.049713593,0.113479294,0.06528862,-0.0078796055,-0.12683801,-0.2029609,0.17053875,0.03340398,-0.061518937,0.059385054,0.13831548,-0.13800374,-0.0011183274,-0.21415886,0.09237874,-0.107848056]" }, limit: 10, order_by: { distance: Asc }) {
    id
    distance
    product {
      name
    }
  }
}

query ProductsPriceVector {
  experience_productsVectorDistance(
    args: { queryVector: "[-0.26627868,0.024454566,-0.12411288,-0.06926076,0.114167295,-0.05908405,-0.11366025,-0.20373131,-0.07778197,-0.13792849,0.024760943,-0.06993264,-0.08388083,-0.062369984,0.048473757,0.024872025,-0.23152019,-0.05411574,0.004388886,-0.21127427,-0.15947516,0.105058424,0.033486396,-0.029446172,-0.2548478,-0.21878138,-0.0880393,0.33248106,0.093399994,-0.20333715,0.30673468,0.114914425,-0.105746426,0.18683583,-0.049713593,0.113479294,0.06528862,-0.0078796055,-0.12683801,-0.2029609,0.17053875,0.03340398,-0.061518937,0.059385054,0.13831548,-0.13800374,-0.0011183274,-0.21415886,0.09237874,-0.107848056]" }
    limit: 10
    order_by: { distance: Asc }
    where: { product: { price: { _gt: 500 } } }
  ) {
    id
    distance
    product {
      name
    }
  }
}

# ### Nested Aggregations 

# query MyQuery {
#   Artist {
#     Albums_aggregate {
#       aggregate {
#         sum {
#           AlbumId
#         }
#       }
#     }
#   }
# }

## Optum Query (Remote Relns in Predicates)

# query MyQuery {
#  StaffAvailability{
#    Slots {
#      Appointments(where: {PatientRef: {_eq: 1570204}}) {
#        PatientRef
#      }
#    }
#    AvailabilityDate
#    staffName
#  }
# }