### Local Relationships 

query LocalRelns {
  experience_products {
    name
    categories {
      name
    }
    manufacturers {
      name
    }
    cartItems {
      carts {
        updatedAt
      }
      productId
    }
  }
}

### Nested queries - Joins
### GraphQL query using the above schema such that there are N+1 queries in fetching data from different subgraphs

query CrossRelns1 {
  users_users { # Fetching users might be the initial query
    id
    name
    orders { # For each user, fetch orders (N queries for N users)
      id
      products { # For each order, fetch products (1+N queries if each user has 1 order)
        id
        name
      }
    }
  }
}

query CrossRelns2 {
  experience_products {
    reviews {
      id
      users {
        email
        reviews {
          id
        }
      }
    }
  }
}

## Chaining Resolver Example

query ChainingResolver {
  users_reviews(where: {id: {_eq: "dc9768a4-673c-11ed-b682-7224baf239e5"}}) {
    text
    rating
    id
    users {
      name
      id
    }
    products{
      price
      id
    }
  }
}

### Top N

# {
#   salesUsers(limit: 2) {
#     id   #From subgraph-1
#     name
#         #From subgraph-2
#     reviews(order_by: {created_at: Asc}, limit: 3) {
#       id
#       created_at
#       rating
#     }
#   }
# }

query TopN{
  experience_products(offset: 1, order_by: {manufacturers: {name: Asc}}) {
    name
    orders(order_by: {createdAt: Asc}, limit: 2) {
      createdAt
      users {
        name
        reviews(order_by: {rating: Desc}, limit: 1) {
          text
        }
      }
    }
  }
}

### Product Page (Top N)

# {
#   products(
#     where: {country_of_origin: {_eq: "US"}}
#     order_by: {price: Asc}
#     limit: 10
#   ) {
#     id
#     name
#     price
#     manufacturer {
#       name
#     }
#     topReviews: reviews(
#       where: {created_at: {_gt: "2023-10-15"}}
#       order_by: {rating: Desc}
#       limit: 3
#     ) {
#       rating
#       text
#       user {
#         name
#       }
#     }
#     worstReviews: reviews(
#       where: {created_at: {_gt: "2023-10-15"}}
#       order_by: {rating: Asc}
#       limit: 3
#     ) {
#       rating
#       text
#       user {
#         name
#       }
#     }
#   }
# }

### Peoduct Page Top N and local relationships in boolean expressions work

query ProductHomePage {
  experience_products(
    where: {countryOfOrigin: {_eq: "US"}, categories: {name: {_eq: "T-Shirts"}}}
    order_by: {price: Asc}
    limit: 10
  ) {
    id
    name
    price
    manufacturers {
      name
    }
    topReviews: reviews(
      where: {createdAt: {_gt: "2023-10-15"}}
      order_by: {rating: Desc}
      limit: 3
    ) {
      rating
      text
      users {
        name
      }
    }
    worstReviews: reviews(
      where: {createdAt: {_gt: "2023-10-15"}}
      order_by: {rating: Asc}
      limit: 3
    ) {
      rating
      text
      users {
        name
      }
    }
    categories {
      name
    }
  }
}

### Nested Relationship Traversal, Filtering, Offsetting and Sorting

query NestedRelnsFiltsort {
  experience_products {
    reviews {
      id
      users {
        email
        reviews(
          where: {isVisible: {_eq: "false"}}
          offset: 1
          order_by: {createdAt: Desc}
        ) {
          id
          isVisible
        }
      }
    }
  }
}

### Remote Relationship in Filter

query Relnsinfilter {
  experience_products(
    where: {manufacturerId: {_eq: "e99cbfe2-65b4-11ed-b13b-6a8b11ef7372"}}
    order_by: {manufacturerId: Asc}
  ) {
    orders(order_by: {deliveryDate: Desc}) {
      id
      users {
        notifications(order_by: {createdAt: Asc}) {
          message
          createdAt
        }
      }
    }
  }
}

### Parallel Execution 

query Parallelexecution {
  users_users {
    id
    orders { # remote relationship
      deliveryDate
    }
    carts { # remote relationship
      createdAt
    }
  }
  experience_products {
    name
  }
}


query UserOrderHistory {
  sales_orders(
    where: {userId: {_eq: "7cf0a66c-65b7-11ed-b904-fb49f034fbbb"}}
    order_by: {createdAt: Desc}
    limit: 1
    # offset: 0
  ) {
    id
    status
    deliveryDate
    products {
      name
      image
      categories {
        name
      }
      reviews(
        where: {userId: {_eq: "7cf0a66c-65b7-11ed-b904-fb49f034fbbb"}}
        order_by: {createdAt: Desc}
      ) {
        rating
        text
        createdAt
      }
    }
  }
}


query OrderTracking {
  sales_orders(where: {id: {_eq: "c7406b75-6b24-41e4-9c5b-ff3feada9447"}}) {
    id
    status
    deliveryDate
    products {
      id
      name
      price
      image
      manufacturers {
        name
      }
    }
    users {
      id
      name
    }
  }
}


# query CartSummaryWithOffers($userId: ID!) {
#   users_users(id: $userId) {
#     carts(where: {isComplete: {_eq: false}}) {
#       items: cartItems {
#         products {
#           id
#           name
#           price
#         }
#         quantity
#       }
#       offers: coupons {
#         code
#         amount
#       }
#     }
#   }
# }







